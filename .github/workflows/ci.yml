# basic compile and test workflow for gst-plugin-pylon

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


env:
  PYLON_DOWNLOAD_URL_BASE: ${{ secrets.PYLON_DOWNLOAD_URL_BASE }}
  PYLON_DOWNLOAD_URL_BASE_FALLBACK: ${{ secrets.PYLON_DOWNLOAD_URL_BASE_FALLBACK }}
  
  # FIXME: versions still required in the matrix jobs
  LINUX_AARCH64_VERSIONS: |
    7.5.0.15658
    7.4.0.14900
    6.2.0.21487

  LINUX_X86_64_VERSIONS: |
    7.5.0.15658
    7.4.0.14900

  WINDOWS_VERSIONS: |
    7.5.0.15658
    7.4.0.14900

  MACOS_VERSIONS: |
    7.3.1.0011

    

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      is_release_build: ${{ env.RELEASE_BUILD == '1' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Pylon SDK files
        id: download-pylon-sdks
        run: |
          #set -e
          #set -x

          download_file() {
            local file=$1
            local fpath=$2
            local base_url="${{ env.PYLON_DOWNLOAD_URL_BASE }}"
            local fallback_url="${{ env.PYLON_DOWNLOAD_URL_BASE_FALLBACK }}"
            local success=0

            # create target dir
            mkdir -p $fpath
          
            # Extract version, prefix, and suffix from the filename
            local version=$(echo $file | grep -oP '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
            local prefix=$(echo $file | grep -oP '^[^0-9]+')
            local suffix=$(echo $file | grep -oP '((_|-)(linux(_|-))?(aarch64.setup.tar.gz|x86_64.setup\.tar\.gz)|.exe|.dmg)$')
            
            # Define possible variations
            local prefixes=("${prefix}" "${prefix//-/_}" "${prefix//_/-}" )
            local versions=("${version}" "${version//./_}" "${version//_/.}")
            local suffixes=("${suffix}" "${suffix//-/_}" "${suffix//_/-}")
          
            # If the file starts with "Basler", consider both "Basler" and "basler"
            if [[ $prefix == "Basler-pylon-"* ]]; then
              prefixes+=("basler-pylon-${prefix#Basler-pylon-}")
              prefixes+=("basler_pylon_${prefix#Basler-pylon-}")
            fi

            # handle pylon 7.4 x86
            if [[ $suffix == "-linux"* ]]; then
              suffixes+=("_linux${suffix#-linux}")
            fi

            # handle 6.2 on arm with out linux prefix
            if [[ $suffix == "-linux-aarch64"* ]]; then
              suffixes+=("_aarch64${suffix#-linux-aarch64}")
            fi

          # Generate all permutations of prefix, version, and suffix and try base URL first
            for pre in "${prefixes[@]}"; do
              for ver in "${versions[@]}"; do
                for suf in "${suffixes[@]}"; do
                  local pattern="${pre}${ver}${suf}"
                  if wget -c -q "$base_url/$pattern" -O "$fpath/$file"; then
                  # if curl --output /dev/null --silent --head --fail "$base_url/$pattern"; then
                    success=1
                    break 3
                  fi
                done
              done
            done

            # If not found in base URL, try fallback URL
            if [[ $success -ne 1 ]]; then
              for pre in "${prefixes[@]}"; do
                for ver in "${versions[@]}"; do
                  for suf in "${suffixes[@]}"; do
                    local pattern="${pre}${ver}${suf}"
                    if wget -c -q "$fallback_url/$pattern" -O "$fpath/$file"; then
                    # debug if curl --output /dev/null --silent --head --fail "$fallback_url/$pattern"; then
                      success=1
                      break 3
                    fi
                  done
                done
              done
            fi 
            
            if [[ $success -ne 1 ]]; then
              echo "Failed to download $file" >&2
              exit 1
            fi
          }
                    
          generate_and_download_files() {
            local versions=$1
            local prefix=$2
            local suffix=$3
            local fpath=$4
            local filenames=()

            echo "Download $fpath"

            for version in $versions; do
              local file="${prefix}${version}${suffix}"
              filenames+=("$fpath/$file")
              echo "    $file"
              download_file "$file" "$fpath"
            done
          }
          
          # convert multiline github action vars into bash 
          linux_aarch64_versions="$(echo '${{ env.LINUX_AARCH64_VERSIONS }}' | tr '\n' ' ')"
          linux_x86_64_versions="$(echo '${{ env.LINUX_X86_64_VERSIONS }}' | tr '\n' ' ' )"
          windows_versions="$( echo '${{ env.WINDOWS_VERSIONS }}' | tr '\n' ' ' )"
          macos_versions="$( echo  '${{ env.MACOS_VERSIONS }}' | tr '\n' ' ' )"

          generate_and_download_files "$linux_aarch64_versions" "pylon-" "-linux-aarch64_setup.tar.gz" "linux_aarch64_sdk"
          generate_and_download_files "$linux_x86_64_versions" "pylon-" "-linux-x86_64_setup.tar.gz" "linux_x86_64_sdk"
          generate_and_download_files "$windows_versions" "Basler-pylon-" ".exe" "windows_sdk"
          generate_and_download_files "$macos_versions" "pylon-" ".dmg" "macos_sdk"


      - name: Upload Pylon SDK for Linux aarch64
        uses: actions/upload-artifact@v3
        with:
          name: Linux_aarch64_Pylon
          path: linux_aarch64_sdk

      - name: Upload Pylon SDK for Linux x86_64
        uses: actions/upload-artifact@v3
        with:
          name: Linux_x86_64_Pylon
          path: linux_x86_64_sdk

      - name: Upload Pylon SDK for Windows
        uses: actions/upload-artifact@v3
        with:
          name: Windows_Pylon
          path: windows_sdk

      - name: Upload Pylon SDK for macOS
        uses: actions/upload-artifact@v3
        with:
          name: macOS_Pylon
          path: macos_sdk

      - name: Check for release build
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "Build release for $GITHUB_REF"
          echo "RELEASE_BUILD=1" >> $GITHUB_ENV

  build_windows_x86_64:
    needs: prepare
    strategy:
      matrix:
        os: [ windows-2019 ]
        py_version: [ 7.5.0.15658, 7.4.0.14900] 
      fail-fast: false
    runs-on: ${{ matrix.os }}
    name: Build pylon ${{ matrix.py_version }} on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: Windows_Pylon
          path: pylon-installer
      - name: install pylon
        run: |
          Start-Process .\pylon-installer\Basler-pylon-${{ matrix.py_version }}.exe -Wait -ArgumentList '/quiet /install=SDKs;Cpp_Runtime;CamEmu_Support'

      - name: install meson
        run: |
          pip install meson ninja

      - name: Download Gstreamer
        uses: suisei-cn/actions-download-file@v1
        with:
          url:    https://gstreamer.freedesktop.org/data/pkg/windows/1.22.7/msvc//gstreamer-1.0-msvc-x86_64-1.22.7.msi
          target: ${{ runner.temp }}\

      - name: Download Gstreamer dev
        uses: suisei-cn/actions-download-file@v1
        with:
          url:    https://gstreamer.freedesktop.org/data/pkg/windows/1.22.7/msvc/gstreamer-1.0-devel-msvc-x86_64-1.22.7.msi
          target: ${{ runner.temp }}\

      - name: Install Gstreamer
        run:  |
            cmd /c start /wait msiexec /package ${{ runner.temp }}\gstreamer-1.0-msvc-x86_64-1.22.7.msi TARGETDIR="C:\" /quiet ADDLOCAL=ALL /L*V gst.log
            cmd /c start /wait msiexec /package ${{ runner.temp }}\gstreamer-1.0-devel-msvc-x86_64-1.22.7.msi TARGETDIR="C:\" /quiet ADDLOCAL=ALL /L*V dev.log
            cat gst.log
            cat dev.log

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: compile
        run: |
          # access to pkg-config
          $env:GSTREAMER_1_0_ROOT_MSVC_X86_64 = "C:\gstreamer\1.0\msvc_x86_64"
          $env:CMAKE_PREFIX_PATH = "C:\Program Files\Basler\pylon 7\Development\CMake\pylon\"
          $env:Path = "$env:GSTREAMER_1_0_ROOT_MSVC_X86_64\bin;" + $env:Path
          $env:PKG_CONFIG_PATH = "$env:GSTREAMER_1_0_ROOT_MSVC_X86_64\lib\pkgconfig"
          $env:PKG_CONFIG = "$env:GSTREAMER_1_0_ROOT_MSVC_X86_64\bin\pkg-config"

          meson setup build --prefix="$env:GSTREAMER_1_0_ROOT_MSVC_X86_64"
          ninja -C build
          ninja -C build test
          ninja -C build install

      - name: Print meson log
        if: ${{ failure() }}
        run: |
          cat  build/meson-logs/meson-log.txt

      - name: test
        run: |
          $env:PYLON_CAMEMU="1"
          $env:GSTREAMER_1_0_ROOT_MSVC_X86_64 = "C:\gstreamer\1.0\msvc_x86_64\"
          $env:Path = "C:\Program Files\Basler\pylon 7\Runtime\x64\;$env:GSTREAMER_1_0_ROOT_MSVC_X86_64\bin;" + $env:Path
          gst-inspect-1.0.exe pylonsrc
          gst-launch-1.0.exe pylonsrc num-buffers=10 ! fakesink


  build_linux_aarch64:
    needs: prepare
    strategy:
      matrix:
        os: [ubuntu18.04, ubuntu20.04, ubuntu22.04 ]
        py_version: [ 7.5.0.15658, 7.4.0.14900, 6.2.0.21487 ] 
      fail-fast: false
    runs-on: ubuntu-latest
    name: Build pylon ${{ matrix.py_version }} on ${{ matrix.os }}-aarch64
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: Linux_aarch64_Pylon
          path: pylon-installer

      - uses: uraimo/run-on-arch-action@v2
        name: build and test aarch64
        id: runcmd
        with:
          arch: aarch64
          distro: ${{ matrix.os }}
          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"
          dockerRunArgs: |
            --volume "${PWD}/pylon-installer:/pylon-installer"

          run: |
            uname -a

            # install pylon
            PYLON_TGZ=$(readlink -m /pylon-installer/pylon-${{ matrix.py_version }}-linux-aarch64_setup.tar.gz)
            mkdir pylon_tmp
            pushd pylon_tmp
            tar -xf $PYLON_TGZ
            mkdir -p /opt/pylon
            tar -C /opt/pylon -xzf pylon*aarch64.tar.gz
            popd

            # install required environment
            apt-get update
            # remove conflicting package
            dpkg-query -W -f='${Status}' libunwind-14-dev  | grep "ok installed" && apt-get remove -y libunwind-14-dev
            # install required build tools
            apt-get -y install python3 python3-pip libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev cmake clang gstreamer1.0-tools
            pip3 install pip --upgrade
            pip3 install meson ninja

            # compile gcc
            export PYLON_ROOT=/opt/pylon
            export CC=gcc
            export CXX=g++
            meson setup builddir_gcc --prefix $PWD/install_gcc
            ninja -C builddir_gcc
            ninja -C builddir_gcc test
            ninja -C builddir_gcc install

            # compile clang
            export PYLON_ROOT=/opt/pylon
            export CC=clang
            export CXX=clang++
            meson setup builddir_clang --prefix $PWD/install_clang
            ninja -C builddir_clang
            ninja -C builddir_clang test
            ninja -C builddir_clang install

            # run tests gcc
            export GST_PLUGIN_PATH=$PWD/install_gcc/lib/aarch64-linux-gnu/gstreamer-1.0
            export LD_LIBRARY_PATH=$PWD/install_gcc/lib/aarch64-linux-gnu
            export PYLON_CAMEMU=1
            gst-inspect-1.0 pylonsrc
            gst-launch-1.0 pylonsrc num-buffers=10 ! fakesink

            # run tests clang
            export GST_PLUGIN_PATH=$PWD/install_clang/lib/aarch64-linux-gnu/gstreamer-1.0
            export LD_LIBRARY_PATH=$PWD/install_clang/lib/aarch64-linux-gnu
            export PYLON_CAMEMU=1
            gst-inspect-1.0 pylonsrc
            gst-launch-1.0 pylonsrc num-buffers=10 ! fakesink

  build_linux_x86_64:
    needs: prepare
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, ubuntu-24.04]
        py_version: [ 7.5.0.15658, 7.4.0.14900] 
      fail-fast: false
    runs-on: ${{ matrix.os }}
    name: Build pylon ${{ matrix.py_version }} on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: Linux_x86_64_Pylon
          path: pylon-installer

      - name: install pylon
        run: |
          PYLON_TGZ=$(readlink -m pylon-installer/pylon-${{ matrix.py_version }}-linux-x86_64_setup.tar.gz)
          mkdir pylon_tmp
          pushd pylon_tmp
          tar -xf $PYLON_TGZ
          sudo mkdir -p /opt/pylon
          sudo tar -C /opt/pylon -xzf pylon*x86_64.tar.gz
          # install codemeter
          sudo apt-get install -y /opt/pylon/share/pylon/codemeter_*.deb --fix-broken || echo "Codemeter install failed"
          popd

      - name: install required environment
        run: |
          sudo apt-get update
          # remove conflicting package
          sudo dpkg-query -W -f='${Status}' libunwind-14-dev  | grep "ok installed" && sudo apt-get remove -y libunwind-14-dev
          # install required build tools
          sudo apt-get -y install python3 python3-pip libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev cmake clang gstreamer1.0-tools
          pip3 install pip --upgrade
          pip3 install meson ninja

      - name: compile gcc
        run: |
          export PYLON_ROOT=/opt/pylon
          export CC=gcc
          export CXX=g++
          meson setup builddir_gcc --prefix $PWD/install_gcc
          ninja -C builddir_gcc
          ninja -C builddir_gcc test
          ninja -C builddir_gcc install

      - name: compile clang
        run: |
          export PYLON_ROOT=/opt/pylon
          export CC=clang
          export CXX=clang++
          meson setup builddir_clang --prefix $PWD/install_clang
          ninja -C builddir_clang
          ninja -C builddir_clang test
          ninja -C builddir_clang install

      - name: run tests gcc
        run: |
          export GST_PLUGIN_PATH=$PWD/install_gcc/lib/x86_64-linux-gnu/gstreamer-1.0
          export LD_LIBRARY_PATH=$PWD/install_gcc/lib/x86_64-linux-gnu/
          export PYLON_CAMEMU=1
          gst-inspect-1.0 pylonsrc
          gst-launch-1.0 pylonsrc num-buffers=10 ! fakesink

      - name: run tests clang
        run: |
          export GST_PLUGIN_PATH=$PWD/install_clang/lib/x86_64-linux-gnu/gstreamer-1.0
          export LD_LIBRARY_PATH=$PWD/install_clang/lib/x86_64-linux-gnu/
          export PYLON_CAMEMU=1
          gst-inspect-1.0 pylonsrc
          gst-launch-1.0 pylonsrc num-buffers=10 ! fakesink


  cleanup:
    if: always()
    needs: [
            prepare,
            build_linux_x86_64,
            build_linux_aarch64,
            build_windows_x86_64
    ]
    runs-on: ubuntu-latest
    steps:
    - uses: geekyeggo/delete-artifact@v2
      continue-on-error: true
      with:
        name: |
          Linux_x86_64_Pylon
          Linux_aarch64_Pylon
          Windows_Pylon
          macOS_Pylon

          

