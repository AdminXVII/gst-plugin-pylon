#!/usr/bin/env bash
#
# Check that the code follows a consistent code style
#

# Check for existence of indent, and error out if not present.
# On some *bsd systems the binary seems to be called gnunindent,
# so check for that first.

version=`gnuindent --version 2>/dev/null`
if test "x$version" = "x"; then
  version=`gindent --version 2>/dev/null`
  if test "x$version" = "x"; then
    version=`indent --version 2>/dev/null`
    if test "x$version" = "x"; then
      echo "GStreamer git pre-commit hook:"
      echo "Did not find GNU indent, please install it before continuing."
      exit 1
    else
      GNU_INDENT=indent
    fi
  else
    GNU_INDENT=gindent
  fi
else
  GNU_INDENT=gnuindent
fi

case `$GNU_INDENT --version` in
  GNU*)
      ;;
  default)
      echo "GStreamer git pre-commit hook:"
      echo "Did not find GNU indent, please install it before continuing."
      echo "(Found $GNU_INDENT, but it doesn't seem to be GNU indent)"
      exit 1
      ;;
esac

version=`clang-format --version 2>/dev/null`
if test "x$version" = "x"; then
  echo "Did not find clang-format, please install it before continuing."
  exit 1
else
  CLANG_INDENT=clang-format
fi

GNU_INDENT_PARAMETERS="--braces-on-if-line \
	--case-brace-indentation0 \
	--case-indentation2 \
	--braces-after-struct-decl-line \
	--line-length80 \
	--no-tabs \
	--cuddle-else \
	--dont-line-up-parentheses \
	--continuation-indentation4 \
	--honour-newlines \
	--tab-size8 \
	--indent-level2 \
	--leave-preprocessor-space"

CLANG_INDENT_STYLE="{
    BasedOnStyle:  Google,
    IncludeBlocks: Regroup,
    IncludeCategories: [
      {
         Regex: '^<ext/.*\\\.h>',
         Priority: 3
      },
      {
         Regex: '^<.*\\\.h>',
         Priority: 2
      },
      {
         Regex: '^<.*',
         Priority: 3
      },
      {
         Regex: '.*',
         Priority: 1
      }
   ]
}"

CLANG_INDENT_PARAMETERS="--style=\"${CLANG_INDENT_STYLE}\" \
    --sort-includes \
    -i"

echo "--Checking style--"
for file in `git diff-index --cached --name-only HEAD --diff-filter=ACMR| grep -e "\.c$" -e "\.cpp$"` ; do
    # nf is the temporary checkout. This makes sure we check against the
    # revision in the index (and not the checked out version).
    nf=`git checkout-index --temp ${file} | cut -f 1`
    newfile=`mktemp /tmp/${nf}.XXXXXX` || exit 1

    #Check if file is a .cpp file
    echo $file | grep -e "\.cpp$"
    found_cpp=$?

    cp "${nf}" "${newfile}"

    if [ $found_cpp = 0 ] ; then
      INDENTER=${CLANG_INDENT}
      PARAMS=${CLANG_INDENT_PARAMETERS}
    else
      INDENTER=${GNU_INDENT}
      PARAMS=${GNU_INDENT_PARAMETERS}
    fi

    eval ${INDENTER} ${PARAMS} $newfile 2>> /dev/null

    diff -u -p "${nf}" "${newfile}"
    r=$?
    rm "${newfile}"
    rm "${nf}"
    if [ $r != 0 ] ; then
echo "================================================================================================="
echo " Code style error in: $file                                                                      "
echo "                                                                                                 "
echo " Please fix before committing. Don't forget to run git add before trying to commit again.        "
echo " If the whole file is to be committed, run as (scripts may be found in hooks/):                  "
echo "                                                                                                 "
echo "   gst-indent $file; git add $file; git commit"
echo "                                                                                                 "
echo " If the file is a .cpp file: "
echo "                                                                                                 "
echo "   cpp-format $file; git add $file; git commit"
echo "                                                                                                 "
echo "================================================================================================="
        exit 1
    fi
done
echo "--Checking style pass--"
